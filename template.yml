AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  BaseAmiParameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Base AMI to build intermediate images on top of.

  OutputAmiParameter:
    Type: AWS::SSM::Parameter::Name
    Description: SSM Parameter to store the latest built image in.

  SecretsBucket:
    Type: String
    Description: Optional â€“ Buildkite elastic-ci stack secrets bucket.
    Default: ""

  BootstrapScriptUrl:
    Type: String
    Description: AMI customisation script, downloaded and executed as part of the image build.
    AllowedPattern: "^s3:\\/\\/.+$"

  InstanceType:
    Type: String
    Description: Instance type for the Image Builder instances.

  SubnetId:
    Type: String # AWS::EC2::Subnet::Id
    Description: Optional - the subnet to schedule ImageBuilder EC2 instances in. If blank, a simple public subnet VPC is created.
    Default: ""

  ScheduleExpression:
    Type: String
    Description: "cron expression for when to run image builds, defaults to nightly at midnight."
    Default: "0 0 * * ? *"

Conditions:
  HasSecrets:
    !Not [ !Equals [ !Ref SecretsBucket, "" ]]

  CreateVpc:
    !Equals [ !Ref SubnetId, "" ]

Resources:
  # IAM role for the image builder instance
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
      Policies:
        - !If
            - HasSecrets
            - PolicyName: SecretsBucketAccess
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:Get
                      - s3:List*
                    Resource:
                      - !Sub "arn:aws:s3:::${SecretsBucket}/*"
                      - !Sub "arn:aws:s3:::${SecretsBucket}"
            - !Ref AWS::NoValue
        - PolicyName: BootstrapScript
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Path}"
                    - Path: { "Fn::Select": [ 1, { "Fn::Split": [ "s3://", !Ref BootstrapScriptUrl ] } ] }
        - PolicyName: S3Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${LogBucket}/*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # Component that optionally syncs the SecretsBucket, downloads and executes
  # the script, and cleans up the secrets bucket cache
  BootstrapComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub "${AWS::StackName}-Bootstrap"
      Platform: Linux
      Version: '0.1.0'
      Description: Execute a bootstrap script.
      Data: !Sub |
        name: BootstrapAmi
        description: Execute a bootstrap script.
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: Download
                action: S3Download
                inputs:
                  - source: ${BootstrapScriptUrl}
                    destination: /tmp/ami_bootstrap
              - name: EnableBootstrap
                action: ExecuteBash
                inputs:
                  commands:
                    - 'chmod +x {{ build.Download.inputs[0].destination }}'
              - name: ExecuteBootstrap
                action: ExecuteBinary
                inputs:
                  path: '{{ build.Download.inputs[0].destination }}'

  BootstrapWithSecretsComponent:
    Type: AWS::ImageBuilder::Component
    Condition: HasSecrets
    Properties:
      Name: !Sub "${AWS::StackName}-BootstrapWithSecrets"
      Platform: Linux
      Version: '0.1.0'
      Description: Download a secrets bucket, execute a bootstrap, remove the secrets.
      Data: !Sub |
        name: BootstrapAmiWithSecrets
        description: Fetch an S3 SecretsBucket and execute a bootstrap script.
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: Download
                action: S3Download
                inputs:
                  - source: ${BootstrapScriptUrl}
                    destination: /tmp/ami_bootstrap
                  - source: s3://${SecretsBucket}/*
                    destination: /tmp/secrets/
              - name: EnableBootstrap
                action: ExecuteBash
                inputs:
                  commands:
                    - 'chmod +x {{ build.Download.inputs[0].destination }}'
              - name: ExecuteBootstrap
                action: ExecuteBinary
                inputs:
                  path: '{{ build.Download.inputs[0].destination }}'
              - name: RemoveSecrets
                action: ExecuteBash
                inputs:
                  commands:
                    - 'rm -rf {{ build.Download.inputs[1].destination }}'
  BootstrapWithSecretsComponent2:
    Type: AWS::ImageBuilder::Component
    Condition: HasSecrets
    Properties:
      Name: !Sub "${AWS::StackName}-BootstrapWithSecrets"
      Platform: Linux
      Version: '0.2.0'
      Description: Download a secrets bucket, execute a bootstrap, remove the secrets.
      Data: !Sub |
        name: BootstrapAmiWithSecrets
        description: Fetch an S3 SecretsBucket and execute a bootstrap script.
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: Prepare
                action: ExecuteBash
                inputs:
                  commands:
                    - mkdir -p /var/lib/buildkite-agent/git-mirrors
                    - chown buildkite-agent:buildkite-agent /var/lib/buildkite-agent/git-mirrors
                    - mkdir -p /tmp/secrets
              - name: Download
                action: S3Download
                inputs:
                  - source: ${BootstrapScriptUrl}
                    destination: /tmp/ami_bootstrap
                  - source: s3://${SecretsBucket}/*
                    destination: /tmp/secrets/
              - name: EnableBootstrap
                action: ExecuteBash
                inputs:
                  commands:
                    - 'chmod +x {{ build.Download.inputs[0].destination }}'
              - name: ExecuteBootstrap
                action: ExecuteBinary
                inputs:
                  path: '{{ build.Download.inputs[0].destination }}'
              - name: RemoveSecrets
                action: ExecuteBash
                inputs:
                  commands:
                    - 'rm -rf {{ build.Download.inputs[1].destination }}'

  # Recipe of the base image + component
  Recipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${AWS::StackName}-Recipe"
      Components:
        - !If
          - HasSecrets
          - ComponentArn: !Ref BootstrapWithSecretsComponent
          - ComponentArn: !Ref BootstrapComponent
      ParentImage: !Ref BaseAmiParameter
      Version: "0.2.0"
  Recipe3:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub "${AWS::StackName}-Recipe"
      Components:
        - !If
          - HasSecrets
          - ComponentArn: !Ref BootstrapWithSecretsComponent2
          - ComponentArn: !Ref BootstrapComponent
      ParentImage: !Ref BaseAmiParameter
      Version: "0.3.0"

  # Publicly routable subnet (route table 0.0.0.0/0 -> igw) in a vpc
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      InternetGatewayId: !Ref Gateway
      VpcId: !Ref Vpc
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      AvailabilityZone: !Select [ 0, { "Fn::GetAZs": !Ref "AWS::Region" } ]
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicWildcardRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Gateway
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupDescription: Enable bootstrap instance egress.
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - Description: Egress to any IPv4
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - Description: Egress to any IPv6
          IpProtocol: -1
          CidrIpv6: ::/0
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateVpc
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  Infrastructure:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub "${AWS::StackName}-Infrastructure"
      InstanceProfileName: !Ref InstanceProfile
      InstanceTypes:
        - !Ref InstanceType
      SubnetId: !If [ CreateVpc, !Ref PublicSubnet, !Ref SubnetId ]
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      TerminateInstanceOnFailure: true
      SnsTopicArn: !Ref PipelineTopic
      # We don't need this but if unset CloudFormation creates it as 
      # `logging: { s3Logs: {} }` which gives Internal Error when running the
      # pipeline.
      Logging:
        S3Logs:
          S3BucketName: !Ref LogBucket
          S3KeyPrefix: !Sub "${AWS::StackName}/"

  # Copy to this region only
  Distribution:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${AWS::StackName}-Distribution"
      Distributions:
        - Region: !Ref AWS::Region
          AmiDistributionConfiguration: {}

  # Composition of the above elements
  Pipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      DistributionConfigurationArn: !Ref Distribution
      ImageRecipeArn: !Ref Recipe3
      InfrastructureConfigurationArn: !Ref Infrastructure
      Schedule:
        PipelineExecutionStartCondition: EXPRESSION_MATCH_ONLY
        ScheduleExpression: !Sub "cron(${ScheduleExpression})"

  # Topic for the pipeline to notify
  PipelineTopic:
    Type: AWS::SNS::Topic
    Properties: {}
  # Lambda that receives notifications from the pipeline sns topic
  BuiltLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Events:
        ImagePipeline:
          Type: SNS
          Properties:
            Topic: !Ref PipelineTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt OutputTopic.TopicName
        - Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${OutputAmiParameter}"
      InlineCode: |
        const AWS = require('aws-sdk');

        exports.handler = async (event) => {
            console.log(`fn=handler event=${JSON.stringify(event)}`);

            for (const record of event.Records) {
                let message = JSON.parse(record.Sns.Message);
                if (message.state.status != "AVAILABLE") {
                  return;
                }

                for (const ami of message.outputResources.amis) {
                  let image = ami.image;

                  /*
                    Update the SSM Parameter and notify the SNS topic.
                  */

                  let ssmParameter = process.env.OUTPUT_PARAMETER;
                  if (ssmParameter != undefined) {
                    console.log(`fn=handler at=ssm`);
                    let ssm = new AWS.SSM({apiVersion: '2014-11-06'});
                    let ssmResult = await ssm.putParameter({
                      Name: ssmParameter,
                      Type: 'String',
                      Value: image,
                      Overwrite: true,
                    }).promise();
                    console.log(`fn=handler at=ssm result=updated`);
                  }

                  let topicArn = process.env.OUTPUT_TOPIC;
                  if (topicArn != undefined) {
                    console.log(`fn=handler at=sns`);
                    let sns = new AWS.SNS({apiVersion: '2010-03-31'});
                    // SNS Topic ARN
                    let snsResult = await sns.publish({
                      Message: JSON.stringify({event: "NewImage", NewImage: {ami: image}}),
                      TopicArn: topicArn,
                    }).promise();
                    console.log(`fn=handler at=sns result=updated`);
                  }
                };
            };

            return {
                statusCode: 200,
            };
        };
      Handler: index.handler
      Environment:
        Variables:
          OUTPUT_PARAMETER: !Ref OutputAmiParameter
          OUTPUT_TOPIC: !Ref OutputTopic

  # Output topic that is notified for each modification to the output parameter
  OutputTopic:
    Type: AWS::SNS::Topic
    Properties: {}

Outputs:
  Topic:
    Value: !Ref OutputTopic
